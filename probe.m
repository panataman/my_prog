function [ ...
		r, ...
		grid_system, ...
		multiple_dimension_all_data_matrix, ...
		control_power_WO, 
		control_power_W] = runCooling(config_grid)
    %% this function estimates:
    % a) r = load_matrix for power flow simulator
    % b) grid_system = supermarket system whit all estimated values and parameters
    % c) b = matrix whit provided and integrated electric power
    % here are indices of time the simulation should run
    number_steps = 24;
    number_days = 3;
    % the grid system will be initialised
    grid_system = Power_grid(config_grid, number_steps, number_days);
    % this is the real power that wind power can supply
    
    %% wind power data form wind generator
    [ operating_gen_output_RT, ...
	operating_gen_output_RT_gross, ...
	promised_gen_output_DA_gross, ...
	gen_output_real_T, ...
	gen_output_day_A] =  estimator_power_for_load_gross;
    %%
    r = zeros(size(operating_gen_output_RT));
    multiple_dimension_all_data_matrix = zeros([size(operating_gen_output_RT) 7]);

    %% loop run down the "w" days of year
    for w = 1 : number_days
        %% loop run down the "l" time steps of the day
        for l = 1 : number_steps
	    % invoke function every time step
            [   fridges_range_for_load_RT, ...
		hourly_demand_out, ...
		power_for_load_out, ...
		power_b, ...
		power_promised] = ...
			grid_system.new_cooling_strategy.strategy_calculator( ...
			grid_system.buses, ...
			grid_system.hourly_demand_day, ...
			grid_system.hourly_demand_night, ...
			w, ...
			l, ...
			gen_output_real_T(:,l,w), ...
			gen_output_day_A(:,l,w), ...
			promised_gen_output_DA_gross(:,l,w), ...
			number_steps, ...
			number_days);
            
            for m = 1:length(fridges_range_for_load_RT(:,1))

		b = fridges_range_for_load_RT(m,2); % number_bus
		s = fridges_range_for_load_RT(m,3); % number_steps
		r = fridges_range_for_load_RT(m,4); % number_day

                % TEMPERATURE CALCULATION
                grid_system.buses(b).supermarkets(s). ...
                    refrigerators(r).temperature_change( ...
			number_steps, ...
			l, ...
			w, ...
			s, ...
			r, ...
			fridges_range_for_load_RT(m,5), ...
			fridges_range_for_load_RT(m,6));
                
                % THE RETURN LOAD OUTPUT MATRIX of the WILL BE WRITTEN
                r(b,l,w) = r(b,l,w) + fridges_range_for_load_RT(m,10);
                
                % THE RETURN ELECTRIC POWER INTEGRATION MATRIX
                % overall electric power consumption
		multiple_dimension_all_data_matrix(b,l,w,1) = ...
			hourly_demand_out; %fridges_range_for_load_RT(m,10);
                
                % overall electric power integrated
		multiple_dimension_all_data_matrix(b,l,w,2) = ...
			multiple_dimension_all_data_matrix(b,l,w,2) + ...
			fridges_range_for_load_RT(m,11);
                
                
                % overall power for load
		multiple_dimension_all_data_matrix(b,l,w,3) = ...
			power_for_load_out(b);
                
                % overall wind power
		multiple_dimension_all_data_matrix(b,l,w,4) = ...
			abs(gen_output_real_T(b,l,w) - power_b(b));
                
                % overall power
		multiple_dimension_all_data_matrix(b,l,w,5) = ...
			multiple_dimension_all_data_matrix(b,l,w,5) + ...
			fridges_range_for_load_RT(m,10);
                
		multiple_dimension_all_data_matrix(b,l,w,6) = ...
			multiple_dimension_all_data_matrix(b,l,w,5) - ...
			multiple_dimension_all_data_matrix(b,l,w,2);
                
		multiple_dimension_all_data_matrix(b,l,w,7) = power_promised(b);
            end
            
            r(b,l,w) = r(b,l,w) - hourly_demand_out;
            
        end
    end
    %%
    control_power_WO = sum(sum(sum(abs(gen_output_real_T(:,1:number_steps,:) ...
	- gen_output_day_A(:,1:number_steps,:)))));

    control_power_W = ...
	sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,4))))- ...
	sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,2)))) + ...
	(sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,1)))) - ...
	sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,7))))) + ...
	sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,6))));
    
    sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,2))))
    sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,6))))
    sum(sum(sum(multiple_dimension_all_data_matrix(:,:,:,7))))
    
    function [ operating_gen_output_RT, ...
		operating_gen_output_RT_gross, ...
		promised_gen_output_DA_gross, ...
		gen_output_real_T, ...
		gen_output_day_A ] = estimator_power_for_load_gross
        % load realtime wind power generator data for each bus
        load 'gen_output_RT'
        load 'gen_output_DA'
        gen_output_day_A = gen_output_DA(4:7,:,1:number_days);
        gen_output_real_T = gen_output_RT(4:7,:,1:number_days);
        operating_gen_output_RT = gen_output_RT(4:7,:,:) - ...
            gen_output_DA(4:7,:,:) * 0.85;
        operating_gen_output_RT_gross = sum(operating_gen_output_RT);
        promised_gen_output_DA_gross = sum(gen_output_DA(4:7,:,:) * 0.15);
        
    end
end


